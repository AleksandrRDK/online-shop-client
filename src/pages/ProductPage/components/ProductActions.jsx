import { useNavigate } from 'react-router-dom';
import { updateProduct, deleteProduct } from '@/api/products';
import { useToast } from '@/hooks/useToast';
import Pica from 'pica';
import { validateAvatar } from '@/utils/validators';

function ProductActions({
    isEditing,
    setIsEditing,
    editData,
    setEditData,
    setPreview,
    product,
    setProduct,
    setLoading,
}) {
    const { addToast } = useToast();
    const navigate = useNavigate();

    const handleSave = async () => {
        setLoading(true);
        try {
            let fileToUpload = null;

            if (editData.image instanceof File) {
                // –í–∞–ª–∏–¥–∞—Ü–∏—è
                const error = validateAvatar(editData.image);
                if (error) {
                    addToast(error, 'error');
                    return;
                }

                // –°–∂–∞—Ç–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ Pica
                const pica = Pica();
                const img = document.createElement('img');
                img.src = URL.createObjectURL(editData.image);
                await img.decode();

                const canvas = document.createElement('canvas');
                const maxDim = 512;
                const ratio = Math.min(
                    maxDim / img.width,
                    maxDim / img.height,
                    1
                );
                canvas.width = img.width * ratio;
                canvas.height = img.height * ratio;

                await pica.resize(img, canvas);
                const blob = await pica.toBlob(canvas, editData.image.type);
                fileToUpload = new File([blob], editData.image.name, {
                    type: editData.image.type,
                });
            }

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const updatedData = {
                ...editData,
                owner: editData.owner,
                tags: editData.tags
                    .split(',')
                    .map((t) => t.trim())
                    .filter((t) => t),
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const updated = await updateProduct(
                product._id,
                updatedData,
                fileToUpload
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setProduct(updated);
            setEditData({
                ...editData,
                image: updated.image, // —Ç–µ–ø–µ—Ä—å —ç—Ç–æ URL —Å —Å–µ—Ä–≤–µ—Ä–∞
            });
            setPreview(updated.image || null);
            addToast('–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!', 'success');
            setIsEditing(false);
        } catch (err) {
            addToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!', 'error');
            console.error(err);
        } finally {
            setLoading(false);
        }
    };

    const handleCancel = () => {
        setIsEditing(false);
        setEditData({
            title: product.title,
            price: product.price,
            description: product.description,
            tags: (product.tags || []).join(', '),
            characteristics: product.characteristics || {},
            image: product.image,
            owner: product.owner?._id || product.owner,
        });
        setPreview(product.image || null);
    };

    const handleDelete = async () => {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?')) {
            try {
                await deleteProduct(product._id);
                addToast('–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω!', 'success');
                navigate(-1);
            } catch (err) {
                addToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!', 'error');
                console.error(err);
            }
        }
    };

    return (
        <div className="product-page__actions">
            {isEditing ? (
                <>
                    <button onClick={handleSave}>üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    <button onClick={handleCancel}>‚úñ –û—Ç–º–µ–Ω–∞</button>
                </>
            ) : (
                <>
                    <button onClick={() => setIsEditing(true)}>
                        ‚úè –ò–∑–º–µ–Ω–∏—Ç—å
                    </button>
                    <button onClick={handleDelete}>üóë –£–¥–∞–ª–∏—Ç—å</button>
                </>
            )}
        </div>
    );
}

export default ProductActions;
